using UnityEditor;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using Newtonsoft.Json;


namespace CharmToUnityWindow
{
    public class CharmToUnityWindow : EditorWindow
    {

        //settings
        string pathToCharmContents = @"replacePathToCharmContentsPleaseThanks";
        string textureType = @"replaceTextureTypeExtentionPleaseThanks";

        //Path to unity contents where stuff gets checked
        string pathToUCAbsolute = @"replacePathToUCAbsolute";
        //path to unity contents but localized to the projects folder
        string pathToUCLocal = "";

        //Whether to assign static to all
        bool setAsStatic = true;

        //whether to treat it as a map import
        bool importAsMap = false;

        //folders 
        string f_Textures = "Textures";
        string f_Shaders = "Shaders";
        string f_CustomHLSL = "HLSLs";
        string f_Materials = "Materials";
        string f_Prefabs = "Prefabs";
        string f_FBX = "FBXs";

        //window settings
        public Rect windowRect = new Rect(20, 20, 600, 150);

        string identifier;
        [MenuItem("Window/CharmToUnity/CharmToUnityWindow")]
        public static void ShowWindw()
        {
            EditorWindow.GetWindow(typeof(CharmToUnityWindow));
        }

        private void OnGUI()
        {
            pathToUCAbsolute = pathToUCAbsolute.Replace('\\', '/');
            pathToCharmContents = pathToCharmContents.Replace('\\', '/');

            if (pathToUCAbsolute != @"replacePathToUCAbsolute")
            {
                pathToUCLocal = pathToUCAbsolute.Substring(pathToUCAbsolute.IndexOf("Assets"));
                if (pathToUCLocal[pathToUCLocal.Length - 1] == '/') pathToUCLocal.Substring(0, pathToUCLocal.Length - 2);
            }
            

            windowRect = GUI.Window(0, windowRect, DoMyWindow, "CharmToUnity");

            GUILayout.Label("Import options", EditorStyles.boldLabel);
            pathToUCAbsolute = EditorGUILayout.TextField("Absolute path to Unity contents", pathToUCAbsolute);
            pathToCharmContents = EditorGUILayout.TextField("Absolute path to Charm output", pathToCharmContents);
            textureType = EditorGUILayout.TextField("Texture type extention", textureType);
            setAsStatic = EditorGUILayout.Toggle("Set imports as static?", setAsStatic);
            importAsMap = EditorGUILayout.Toggle("This is a map import", importAsMap);
            EditorGUILayout.Space();


            GUILayout.Label("Folder names for certain things", EditorStyles.boldLabel);
            f_Textures = EditorGUILayout.TextField("Textures", f_Textures);
            f_Shaders = EditorGUILayout.TextField("Shaders (has shader graphs)", f_Shaders);
            f_CustomHLSL = EditorGUILayout.TextField("HLSL (has code for custom nodes)", f_CustomHLSL);
            f_Materials = EditorGUILayout.TextField("Materials", f_Materials);
            f_Prefabs = EditorGUILayout.TextField("Prefabs", f_Prefabs);
            f_FBX = EditorGUILayout.TextField("FBX folder", f_FBX);
            EditorGUILayout.Space();
            

            if(GUILayout.Button("Import materials"))
            {
                PrelimCheckAndSetup();
                ImportMaterials();
            }

            if (GUILayout.Button("Import meshes"))
            {
                PrelimCheckAndSetup();
                Import_Entity();
            }

            if(GUILayout.Button("Assign materials"))
            {
                PrelimCheckAndSetup();
                AssignMaterials();
            }

            if(GUILayout.Button("Create prefab"))
            {
                PrelimCheckAndSetup();
                CreatePrefab();
            }
            EditorGUILayout.Space();


            if (GUILayout.Button("Import everything (do everything above)"))
            {
                foreach(string path in Directory.GetFiles(pathToCharmContents))
                {
                    if(path.Split("_").Last<string>() == "info.cfg")
                    {
                        string batchHash = path.Split('\\').Last();
                        string deserialized = string.Join("\n", File.ReadAllLines($"{pathToCharmContents}/{batchHash}"));
                        importConfig = JsonConvert.DeserializeObject<ImportConfig>(deserialized);

                        PrelimCheckAndSetup(false);
                        ImportMaterialsTest();
                        Import_Entity();
                        AssignMaterials();
                        CreatePrefab();
                    }
                }
                
            }
            
        }

        void DoMyWindow(int windowID)
        {
            GUI.DragWindow();
        }

        ImportConfig importConfig;


        //Adds the necessary folders if they don't exist yet
        void PrelimCheckAndSetup(bool getCfgDefault = true)
        {
            //Check/Create materials
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_Materials}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_Materials}");
            }
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_Textures}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_Textures}");
            }
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_Shaders}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_Shaders}");
            }
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_CustomHLSL}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_CustomHLSL}");
            }
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_FBX}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_FBX}");
            }
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_Prefabs}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_Prefabs}");
            }


            //if map rip then don't do this
            if(getCfgDefault)
            {
                string batchHash = pathToCharmContents.Split('/').Last();
                string deserialized = string.Join("\n", File.ReadAllLines($"{pathToCharmContents}/{batchHash}_info.cfg"));
                importConfig = JsonConvert.DeserializeObject<ImportConfig>(deserialized);
            }
            
        }

        

        void ImportMaterials()
        {
            foreach (var newShader in importConfig.Materials.Keys)
            {
                Debug.Log($"Importing material with name [{newShader}]");
                //Create shader
                Debug.Log("Creating the shader by name " + newShader);
                File.Copy(pathToUCAbsolute + @"\C2Utemplate.shadergraph", pathToUCAbsolute + $"/Shaders/{newShader}.shadergraph", true);
                AssetDatabase.Refresh();

                //Create material
                Material mat;
                Shader toAssign = AssetDatabase.LoadAssetAtPath<Shader>(pathToUCLocal + $"/Shaders/{newShader}.shadergraph");

                //Use material if it already exists
                if (File.Exists(pathToUCAbsolute + $"{f_Materials}/{newShader}.mat"))
                {
                    Debug.Log($"{newShader} mat already exists! Using that instead");
                    mat = AssetDatabase.LoadAssetAtPath<Material>(pathToUCLocal + $"{f_Materials}/{newShader}.mat");
                    mat.shader = toAssign;
                }
                else
                {
                    Debug.Log("Creating the material by same name " + newShader);
                    //Create new material
                    mat = new Material(toAssign);
                    mat.name = newShader;
                    AssetDatabase.CreateAsset(mat, pathToUCLocal + $"/{f_Materials}/{newShader}.mat");
                }

                //Assign textures to material

                //Create folder for this mats textures
                if (!Directory.Exists(pathToUCAbsolute + $"/{f_Textures}/{newShader}"))
                {
                    Directory.CreateDirectory(pathToUCAbsolute + $"/{f_Textures}/{newShader}");
                }

                Debug.Log($"Creating materials for [{newShader}]");
                //import all of the textures for this material to the textures folder then assign them
                Dictionary<string, TexInfo> texturesObj = importConfig.Materials[newShader]["PS"];
                for (int i = 0; i < texturesObj.Count; i++)
                {
                    //get absolute path to texture
                    string textureName = $"PS_{texturesObj.ElementAt(i).Key}_" + texturesObj[texturesObj.ElementAt(i).Key].Hash + textureType;
                    string path = pathToCharmContents + "/Textures/" + textureName;
                    File.Copy(path, pathToUCAbsolute + $"/{f_Textures}/{newShader}/{textureName}", true);

                    AssetDatabase.Refresh();

                    //assign textures to mat
                    Texture2D toSet = AssetDatabase.LoadAssetAtPath<Texture2D>(pathToUCLocal + $"/{f_Textures}/{newShader}/{textureName}");
                    Debug.Log(toSet.name);
                    mat.SetTexture($"_t_{i}", toSet);
                }

                //Copy shaders from charm
                if (File.Exists($"{pathToCharmContents}/Shaders/PS_{newShader}.hlsl"))
                {
                    File.Copy($"{pathToCharmContents}/Shaders/PS_{newShader}.hlsl", $"{pathToUCAbsolute}/{f_CustomHLSL}/{newShader}.hlsl", true);
                }
            }
        }
        void ImportMaterialsTest()
        {
            foreach (var newShader in importConfig.Materials.Keys)
            {
                Debug.Log($"Importing material with name [{newShader}]");
                //Create shader
                Debug.Log("Creating the shader by name " + newShader);
                //File.Copy(pathToUCAbsolute + @"\C2Utemplate.shadergraph", pathToUCAbsolute + $"/Shaders/{newShader}.shadergraph", true);
                AssetDatabase.Refresh();

                //Create material
                Material mat;
                Shader toAssign;
                //Copy shaders from charm
                if (File.Exists($"{pathToCharmContents}/Shaders/PS_{newShader}.hlsl"))
                {
                    //copy the hlsl
                    File.Copy($"{pathToCharmContents}/Shaders/PS_{newShader}.hlsl", $"{pathToUCAbsolute}/{f_CustomHLSL}/{newShader}.hlsl", true);

                    //create new shader from template
                    string newCompiled = string.Join("\n", File.ReadAllLines($"{pathToUCAbsolute}/SHADERTEMPLATENEW.txt"));
                    newCompiled = newCompiled.Replace("REPLACEMEWITHPATHTOSHADER", $"{pathToUCLocal}/{f_CustomHLSL}/{newShader}.hlsl");
                    newCompiled = newCompiled.Replace("REPLACESHADERNAMEPLEASE", $"{newShader}_Compiled");
                    File.WriteAllText($"{pathToUCAbsolute}/{f_CustomHLSL}/{newShader}_COMPILED.shader", newCompiled);
                    AssetDatabase.Refresh();
                    toAssign = AssetDatabase.LoadAssetAtPath<Shader>($"{pathToUCLocal}/{f_CustomHLSL}/{newShader}_COMPILED.shader");
                } else
                {
                    toAssign = Shader.Find("HDRP/Lit");
                }

                //Use material if it already exists
                if (File.Exists(pathToUCAbsolute + $"{f_Materials}/{newShader}.mat"))
                {
                    Debug.Log($"{newShader} mat already exists! Using that instead");
                    mat = AssetDatabase.LoadAssetAtPath<Material>(pathToUCLocal + $"{f_Materials}/{newShader}.mat");
                    mat.shader = toAssign;
                }
                else
                {
                    Debug.Log("Creating the material by same name " + newShader);
                    //Create new material
                    mat = new Material(toAssign);
                    mat.name = newShader;
                    AssetDatabase.CreateAsset(mat, pathToUCLocal + $"/{f_Materials}/{newShader}.mat");
                }

                //Assign textures to material

                //Create folder for this mats textures
                if (!Directory.Exists(pathToUCAbsolute + $"/{f_Textures}/{newShader}"))
                {
                    Directory.CreateDirectory(pathToUCAbsolute + $"/{f_Textures}/{newShader}");
                }

                Debug.Log($"Creating materials for [{newShader}]");
                //import all of the textures for this material to the textures folder then assign them
                Dictionary<string, TexInfo> texturesObj = importConfig.Materials[newShader]["PS"];
                for (int i = 0; i < texturesObj.Count; i++)
                {
                    //get absolute path to texture
                    string textureName = $"PS_{texturesObj.ElementAt(i).Key}_" + texturesObj[texturesObj.ElementAt(i).Key].Hash + textureType;
                    string path = pathToCharmContents + "/Textures/" + textureName;
                    File.Copy(path, pathToUCAbsolute + $"/{f_Textures}/{newShader}/{textureName}", true);

                    AssetDatabase.Refresh();

                    //assign textures to mat
                    Texture2D toSet = AssetDatabase.LoadAssetAtPath<Texture2D>(pathToUCLocal + $"/{f_Textures}/{newShader}/{textureName}");
                    Debug.Log(toSet.name);
                    mat.SetTexture($"_t_{i}", toSet);
                }

                
            }
        }
        void Import_Entity()
        {
            Debug.Log($"Importing meshes for {importConfig.MeshName}");
            string fbxName = importConfig.MeshName ;
            File.Copy($"{pathToCharmContents}/{fbxName}.fbx", $"{pathToUCAbsolute}/{f_FBX}/{fbxName}.fbx", true);
            AssetDatabase.Refresh();
            if (GameObject.Find($"{fbxName}(Clone)") != null) DestroyImmediate(GameObject.Find($"{fbxName}(Clone)"));
            Object toInstantiate = AssetDatabase.LoadAssetAtPath<Object>($"{pathToUCLocal}/{f_FBX}/{fbxName}.fbx");
            GameObject imported = (GameObject) Instantiate(toInstantiate);
            imported.transform.rotation = Quaternion.Euler(-90, 0, 0);
            if(setAsStatic)
            {
                imported.isStatic = true;
                foreach(Transform child in imported.transform.GetComponentsInChildren<Transform>())
                {
                    child.gameObject.isStatic = true;
                }
            }


            //Apply translations
        }

        /// <summary>
        /// Assumes that objects are in scene already
        /// </summary>
        void AssignMaterials()
        {
            Debug.Log($"Assigning materials for {importConfig.MeshName}");
            //Check that the parent gameobject is still there
            GameObject parent = GameObject.Find($"{importConfig.MeshName}(Clone)");
            if (parent == null)
            {
                Debug.Log("Can't find parent object by name " + importConfig.MeshName);
            } else
            {
                Dictionary<string, string> meshMatPairs = importConfig.Parts;


                //if singular
                if(meshMatPairs.Count == 1)
                {
                    Debug.Log("Assigning mats for 1");
                    string matName = meshMatPairs[parent.name.Replace("(Clone)", "")];
                    Debug.Log(matName);
                    parent.GetComponent<MeshRenderer>().material = AssetDatabase.LoadAssetAtPath<Material>($"{pathToUCLocal}/{f_Materials}/{matName}.mat");
                }
                //if multiple 
                else
                {
                    Debug.Log("Assigning mats for multiple");
                    for (int i = 0; i < parent.transform.childCount; i++)
                    {
                        GameObject child = parent.transform.GetChild(i).gameObject;
                        if (meshMatPairs.ContainsKey(child.name))
                        {
                            Material matToAssign = AssetDatabase.LoadAssetAtPath<Material>($"{pathToUCLocal}/{f_Materials}/{meshMatPairs[child.name]}.mat");
                            child.GetComponent<MeshRenderer>().material = matToAssign;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Assumes that gameobjects are already in scene
        /// </summary>
        void CreatePrefab()
        {
            GameObject parent = GameObject.Find($"{importConfig.MeshName}(Clone)");
            PrefabUtility.SaveAsPrefabAsset(parent, $"{pathToUCLocal}/{f_Prefabs}/{importConfig.MeshName}.prefab");
        }


        /// <summary>
        /// Imports a batch of stuff
        /// </summary>
        void Import()
        {
            

            
        }

        /// <summary>
        /// Copies file from pathFrom to pathTo while keeping in mind whether it exists or not
        /// </summary>
        /// <param name="pathFrom"></param>
        /// <param name="pathTo"></param>
        /// <returns></returns>
        void FileCopyWithoutCringe(string pathFrom, string pathTo)
        {
            if (File.Exists(pathTo))
            {
                Debug.Log($"Path at {pathTo} already exists dumbo fumbo");
            }
            else
            {
                File.Copy(pathFrom, pathTo);
                Debug.Log($"Successfully copied to {pathTo}");
            }
        }


    }

    public class ImportConfig
    {
        public Dictionary<string, Dictionary<string, Dictionary<string, TexInfo>>> Materials { get; set; }
        public dynamic Instances { get; set; }
        public string MeshName { get; set; }
        public string UnrealInteropPath { get; set; }
        public Dictionary<string, string> Parts { get; set; }

    }
    public class TexInfo
    {
        public string Hash { get; set; }
        public string SRGB { get; set; }
    }
}

