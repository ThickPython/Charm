using UnityEditor;
using UnityEngine;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Newtonsoft.Json;

namespace CharmToUnityWindow
{
    public class CharmToUnityWindow : EditorWindow
    {

        //settings
        string pathToCharmContents = @"replacePathToCharmContentsPleaseThanks";
        string textureType = @"replaceTextureTypeExtentionPleaseThanks";

        //Path to unity contents where stuff gets checked
        string pathToUCAbsolute = @"replacePathToUCAbsolute";
        //path to unity contents but localized to the projects folder
        string pathToUCLocal = @"";

        //Whether to assign static to all
        bool setAsStatic = true;

        //whether to delete prefabs after importing and instantiating
        bool deleteAfterMakingPrefabs = false;

        //create backup shadergraphs for each material just in case the default fails
        bool createBackupShadergraph = false;

        //create lod groups
        bool createLodGroups = false;
        bool olderUnity = false;
        float objectSizeMultiplier = 5;

        //set render pipline type
        public enum ERPType
        {
            HDRP,
            Builtin
        }

        public ERPType eRPType = ERPType.HDRP;


        public string[] options = new string[] { "Single static", "Multi static or Map" };
        public int importType = 0;

        //folders 
        string f_Textures = "Textures";
        string f_SGBackup = "BackupShadergraph";
        string f_Shaders = "HLSLs";
        string f_Materials = "Materials";
        string f_Prefabs = "Prefabs";
        string f_FBX = "FBXs";

        //window settings
        public Rect windowRect = new Rect(20, 20, 600, 150);

        string identifier;
        [MenuItem("Window/CharmToUnity/CharmToUnityWindow")]
        public static void ShowWindw()
        {
            EditorWindow.GetWindow(typeof(CharmToUnityWindow));
        }

        private void OnGUI()
        {
            pathToUCAbsolute = pathToUCAbsolute.Replace('\\', '/');
            pathToCharmContents = pathToCharmContents.Replace('\\', '/');

            if (pathToUCAbsolute != @"replacePathToUCAbsolute")
            {
                pathToUCLocal = pathToUCAbsolute.Substring(pathToUCAbsolute.IndexOf("Assets"));
                if (pathToUCLocal[pathToUCLocal.Length - 1] == '/') pathToUCLocal.Substring(0, pathToUCLocal.Length - 2);
            }


            windowRect = GUI.Window(0, windowRect, DoMyWindow, "CharmToUnity");

            GUILayout.Label("Import options", EditorStyles.boldLabel);
            pathToUCAbsolute = EditorGUILayout.TextField("Absolute path to Unity contents", pathToUCAbsolute);
            pathToCharmContents = EditorGUILayout.TextField("Absolute path to Charm output", pathToCharmContents);
            textureType = EditorGUILayout.TextField("Texture type extention", textureType);
            EditorGUILayout.Space();
            importType = EditorGUILayout.Popup(importType, options);
            setAsStatic = EditorGUILayout.Toggle("Set imports as static", setAsStatic);
            deleteAfterMakingPrefabs = EditorGUILayout.Toggle("Delete after import", deleteAfterMakingPrefabs);
            createLodGroups = EditorGUILayout.Toggle("Create lod groups", createLodGroups);
            olderUnity = EditorGUILayout.Toggle("LOD change for old", olderUnity);
            objectSizeMultiplier = EditorGUILayout.FloatField("Set lod size (please reinstantiate)", objectSizeMultiplier);
            eRPType = (ERPType)EditorGUILayout.EnumPopup("Set Render Pipeline", eRPType);
            //createBackupShadergraph = EditorGUILayout.Toggle("Create backup Shadergraph", createBackupShadergraph);
            EditorGUILayout.Space();


            GUILayout.Label("Folder names for certain things", EditorStyles.boldLabel);
            f_Textures = EditorGUILayout.TextField("Textures", f_Textures);
            f_SGBackup = EditorGUILayout.TextField("Shaders (has shader graphs)", f_SGBackup);
            f_Shaders = EditorGUILayout.TextField("HLSL (has code for custom nodes)", f_Shaders);
            f_Materials = EditorGUILayout.TextField("Materials", f_Materials);
            f_Prefabs = EditorGUILayout.TextField("Prefabs", f_Prefabs);
            f_FBX = EditorGUILayout.TextField("FBX folder", f_FBX);
            EditorGUILayout.Space();


            if (GUILayout.Button("Import materials"))
            {
                PrelimCheckAndSetup();
                ImportMaterials();
            }

            if (GUILayout.Button("Import meshes"))
            {
                PrelimCheckAndSetup();
                Import_Mesh();
            }

            if (GUILayout.Button("Assign materials"))
            {
                PrelimCheckAndSetup();
                AssignMaterials();
            }

            if (GUILayout.Button("Create prefab"))
            {
                PrelimCheckAndSetup();
                CreatePrefab();
            }

            if (GUILayout.Button("Create instances"))
            {
                PrelimCheckAndSetup();
                CreatePrefabInstances();
            }
            EditorGUILayout.Space();


            if (GUILayout.Button("Import everything (do everything above)"))
            {
                PrelimCheckAndSetup();
                ImportMaterials();
                Import_Mesh();
                AssignMaterials();
                CreatePrefab();
                CreatePrefabInstances();
            }


        }

        void DoMyWindow(int windowID)
        {
            GUI.DragWindow();
        }

        ImportConfig importConfig;
        List<ImportConfig> importConfigs;

        //Adds the necessary folders if they don't exist yet
        void PrelimCheckAndSetup()
        {
            //Check/Create materials
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_Materials}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_Materials}");
            }
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_Textures}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_Textures}");
            }
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_SGBackup}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_SGBackup}");
            }
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_Shaders}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_Shaders}");
            }
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_FBX}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_FBX}");
            }
            if (!Directory.Exists(pathToUCAbsolute + $"/{f_Prefabs}"))
            {
                Directory.CreateDirectory(pathToUCAbsolute + $"/{f_Prefabs}");
            }
        }


        void SetImportConfigs()
        {
            importConfigs = new List<ImportConfig>();
            foreach (string path in Directory.GetFiles($"{pathToCharmContents}", "*.cfg"))
            {
                string deserialized = string.Join("\n", File.ReadAllLines(path));
                importConfigs.Add(JsonConvert.DeserializeObject<ImportConfig>(deserialized));
            }
        }

        void ImportMaterials()
        {
            SetImportConfigs();

            foreach (ImportConfig impConf in importConfigs)
            {
                //import all of the necessary files FIRST (so you don't asset database refresh so much)
                foreach (string newShader in impConf.Materials.Keys.ToArray())
                {

                    //deal with shaders
                    Debug.Log($"Importing and creating shaders for material [{newShader}]");

                    Shader toAssign;
                    bool shaderExists; //if it can't find the shader and returns the default

                    if (eRPType == ERPType.HDRP)
                    {
                        shaderExists = CreateShaderHDRP(newShader, out toAssign);
                    }
                    else
                    {
                        shaderExists = CreateShaderBuiltin(newShader, out toAssign);
                    }
                    if (shaderExists)
                    {
                        CreateMaterial(newShader, toAssign, shaderExists, impConf);
                    }

                }
            }
            Debug.Log("Finished importing all materials!");
        }

        bool CreateShaderHDRP(string shaderName, out Shader returnShader)
        {
            bool shaderExists;
            try
            {
                File.Copy($"{pathToCharmContents}/UnityShaders/PS_{shaderName}.hlsl", $"{pathToUCAbsolute}/{f_Shaders}/{shaderName}.hlsl", true);
                shaderExists = true;
            }
            catch (IOException)
            {
                Debug.Log($"Could not find shader file {shaderName}.hlsl, skipping textures for this");
                shaderExists = false;
            }
            //create new compiled shader from template
            if (shaderExists)
            {
                string newCompiled = string.Join("\n", File.ReadAllLines($"{pathToUCAbsolute}/SHADERTEMPLATENEW.txt"));
                newCompiled = newCompiled.Replace("REPLACEMEWITHPATHTOSHADER", $"{pathToUCLocal}/{f_Shaders}/{shaderName}.hlsl");
                newCompiled = newCompiled.Replace("REPLACESHADERNAMEPLEASE", $"{shaderName}_HDRP");
                File.WriteAllText($"{pathToUCAbsolute}/{f_Shaders}/{shaderName}_HDRP.shader", newCompiled);


                //create a backup shader graph for manual editing if enabled
                if (createBackupShadergraph)
                {
                    File.Copy($"{pathToUCAbsolute}/C2Utemplate.shadergraph", $"{pathToUCAbsolute}/{f_SGBackup}/{shaderName}_SG.shadergraph");
                }
                AssetDatabase.Refresh();
                returnShader = AssetDatabase.LoadAssetAtPath<Shader>($"{pathToUCLocal}/{f_Shaders}/{shaderName}_HDRP.shader");
                return true;
            }
            //return a default shader
            else
            {
                returnShader = Shader.Find("HDRP/Lit");
                return false;
            }
        }
        bool CreateShaderBuiltin(string shaderName, out Shader returnShader)
        {
            bool shaderExists;
            try
            {
                File.Copy($"{pathToCharmContents}/UnityShaders/{shaderName}_builtin.shader", $"{pathToUCAbsolute}/{f_Shaders}/{shaderName}_builtin.shader", true);
                shaderExists = true;
            }
            catch (IOException)
            {
                Debug.LogError($"Could not find shader file {shaderName}_builtin.shader, skipping textures for this");
                shaderExists = false;
            }
            
            if (shaderExists)
            {
                AssetDatabase.Refresh();
                returnShader = AssetDatabase.LoadAssetAtPath<Shader>($"{pathToUCLocal}/{f_Shaders}/{shaderName}_builtin.shader");
                return true;
            }
            else
            {
                returnShader = Shader.Find("Standard (Standard)");
                return false;
            }
        }
        void CreateMaterial(string matName, Shader toAssign, bool shaderExists, ImportConfig impConf)
        {
            //NOW create the material
            Material mat;
            bool matExists;

            //Use material if it already exists
            if (File.Exists(pathToUCAbsolute + $"{f_Materials}/{matName}.mat"))
            {
                matExists = true;
                Debug.Log($"{matName} mat already exists! Using that instead");
                mat = AssetDatabase.LoadAssetAtPath<Material>(pathToUCLocal + $"{f_Materials}/{matName}.mat");
                mat.shader = toAssign;
            }
            else
            {
                matExists = false;
                Debug.Log("Creating the material by same name " + matName);
                //Create new material
                mat = new Material(toAssign);
                mat.name = matName;
            }

            //Do this if there is a shader, if there isn't a shader it will just be an empty material
            if (shaderExists)
            {
                Dictionary<string, TexInfo> texturesObj = impConf.Materials[matName]["PS"];

                //Create folder for this mats textures if it doesn't already exist
                if (!Directory.Exists(pathToUCAbsolute + $"/{f_Textures}/{matName}"))
                {
                    Directory.CreateDirectory(pathToUCAbsolute + $"/{f_Textures}/{matName}");
                }

                //deal with textures
                Debug.Log($"Importing textures for [{matName}]");
                //import all of the textures for this material to the textures folder then assign them
                for (int i = 0; i < texturesObj.Count; i++)
                {
                    //get absolute path to texture
                    string textureName = $"PS_{texturesObj.ElementAt(i).Key}_" + texturesObj[texturesObj.ElementAt(i).Key].Hash + textureType;
                    string pathToTexture = pathToCharmContents + "/Textures/" + textureName;
                    File.Copy(pathToTexture, pathToUCAbsolute + $"/{f_Textures}/{matName}/{textureName}", true);
                }
                AssetDatabase.Refresh();
                //assign textures
                for (int i = 0; i < texturesObj.Count; i++)
                {
                    string textureName = $"PS_{texturesObj.ElementAt(i).Key}_" + texturesObj[texturesObj.ElementAt(i).Key].Hash + textureType;
                    //assign textures to mat
                    Texture2D toSet = AssetDatabase.LoadAssetAtPath<Texture2D>(pathToUCLocal + $"/{f_Textures}/{matName}/{textureName}");
                    Debug.Log(toSet.name);
                    if (eRPType == ERPType.HDRP) //i might fix this eventually :tired:
                    {
                        mat.SetTexture($"_t_{i}", toSet);
                    }
                    else
                    {
                        mat.SetTexture($"_t{i}", toSet);
                    }

                }
            }

            //save material as asset if it didn't already exist
            if (!matExists) AssetDatabase.CreateAsset(mat, pathToUCLocal + $"/{f_Materials}/{matName}.mat");
        }


        void Import_Mesh()
        {
            SetImportConfigs();

            foreach (ImportConfig impConf in importConfigs)
            {
                string fbxName = impConf.MeshName;

                File.Copy($"{pathToCharmContents}/{fbxName}.fbx", $"{pathToUCAbsolute}/{f_FBX}/{fbxName}.fbx", true);
                AssetDatabase.Refresh();
                if (GameObject.Find($"{fbxName}(Clone)") != null) DestroyImmediate(GameObject.Find($"{fbxName}(Clone)"));
                UnityEngine.Object toInstantiate = AssetDatabase.LoadAssetAtPath<UnityEngine.Object>($"{pathToUCLocal}/{f_FBX}/{fbxName}.fbx");
                GameObject imported = (GameObject)Instantiate(toInstantiate);
                imported.name = imported.name.Replace("(Clone)", "");

                //set new parent if singular because otherwise the parent object will have the mesh and that's cringe
                if (impConf.Materials.Keys.ToArray().Length == 1)
                {
                    Debug.Log("Singular part, creating new parent");
                    GameObject newParent = new GameObject(@"newParentVeryTemporary");
                    imported.transform.SetParent(newParent.transform);
                    imported = newParent;
                    imported.name = $"{impConf.MeshName}";
                }

                //rotate because unity
                //imported.transform.rotation = Quaternion.Euler(-90, 0, 0);
            }
            Debug.Log("Finished importing meshes!");
        }

        /// <summary>
        /// Assumes that objects are in scene already
        /// </summary>
        void AssignMaterials()
        {
            SetImportConfigs();
            foreach (ImportConfig impConf in importConfigs)
            {
                Debug.Log($"Assigning materials for {impConf.MeshName}");
                //Check that the parent gameobject is still there
                GameObject parent = GameObject.Find($"{impConf.MeshName}");

                //just in case if same parent and child
                parent = parent.transform.root.gameObject;
                if (parent == null)
                {
                    Debug.Log("Can't find parent object by name " + impConf.MeshName);
                }
                else
                {
                    Dictionary<string, string> meshMatPairs = impConf.Parts;
                    for (int i = 0; i < parent.transform.childCount; i++)
                    {
                        GameObject child = parent.transform.GetChild(i).gameObject;
                        if (meshMatPairs.ContainsKey(child.name))
                        {
                            Material matToAssign;
                            //if emission shader
                            if (meshMatPairs[child.name] == "FFFFFFFF")
                            {
                                AssetDatabase.CopyAsset($"{pathToUCLocal}/BlankEmissionTemplate.mat", $"{pathToUCLocal}/{f_Materials}/{child.name}_Emission.mat");
                                //File.Copy($"{pathToUCAbsolute}/BlankEmissionTemplate.mat", $"{pathToUCAbsolute}/{f_Materials}/{child.name}_Emission.mat", true);
                                matToAssign = AssetDatabase.LoadAssetAtPath<Material>($"{pathToUCLocal}/{f_Materials}/{child.name}_Emission.mat");

                            }
                            //any other shader
                            else
                            {
                                matToAssign = AssetDatabase.LoadAssetAtPath<Material>($"{pathToUCLocal}/{f_Materials}/{meshMatPairs[child.name]}.mat");
                            }
                            child.GetComponent<MeshRenderer>().material = matToAssign;
                        }
                    }
                }
            }



        }

        /// <summary>
        /// Assumes that gameobjects are already in scene
        /// </summary>
        void CreatePrefab()
        {
            SetImportConfigs();

            if (importType == 0)
            {
                foreach (ImportConfig impConf in importConfigs)
                {
                    GameObject parent = GameObject.Find($"{impConf.MeshName}");
                    CreateLods(parent, impConf);
                    SetStatic(parent);
                    if (parent == null)
                    {
                        Debug.Log($"Could not find parent gameobject by name {impConf.MeshName}");
                    }
                    else
                    {
                        Debug.Log($"Creating prefab with name ${impConf.MeshName}");
                        PrefabUtility.SaveAsPrefabAsset(parent, $"{pathToUCLocal}/{f_Prefabs}/{impConf.MeshName}.prefab");
                    }
                    if (deleteAfterMakingPrefabs) DestroyImmediate(parent);
                }
            }
            else if (importType == 1)
            {
                foreach (ImportConfig impConf in importConfigs)
                {
                    GameObject parent = GameObject.Find($"{impConf.MeshName}");
                    //create list of part names and children
                    Dictionary<string, List<Transform>> parentsAndKids = new Dictionary<string, List<Transform>>();
                    for (int i = 0; i < parent.transform.childCount; i++)
                    {
                        Transform child = parent.transform.GetChild(i);
                        string childName = child.name.Split('_')[0];
                        if (!parentsAndKids.Keys.Contains<string>(childName))
                        {
                            parentsAndKids[childName] = new List<Transform>();
                        }
                        parentsAndKids[child.name.Split('_')[0]].Add(child);
                    }

                    //create folder for map prefabs
                    if (!Directory.Exists($"{pathToUCAbsolute}/{f_Prefabs}/MapMulti_{impConf.MeshName}"))
                    {
                        Directory.CreateDirectory($"{pathToUCAbsolute}/{f_Prefabs}/MapMulti_{impConf.MeshName}");
                    }
                    AssetDatabase.Refresh();

                    //assemble the prefabs with new parents
                    foreach (string prefabName in parentsAndKids.Keys.ToArray())
                    {
                        GameObject newPrefab = new GameObject(prefabName);
                        foreach (Transform child in parentsAndKids[prefabName])
                        {
                            child.transform.SetParent(newPrefab.transform);
                        }

                        CreateLods(newPrefab, impConf);
                        SetStatic(newPrefab);

                        PrefabUtility.SaveAsPrefabAsset(newPrefab, $"{pathToUCLocal}/{f_Prefabs}/MapMulti_{impConf.MeshName}/{prefabName}.prefab");
                        if (deleteAfterMakingPrefabs) DestroyImmediate(newPrefab);
                    }

                    if (deleteAfterMakingPrefabs) DestroyImmediate(parent);
                }
            }

        }

        void CreateLods(GameObject parent, ImportConfig impConf)
        {
            //Create lods if needed
            if (createLodGroups)
            {
                Debug.Log(parent.name);
                LODGroup lodGroup = parent.AddComponent<LODGroup>();
                lodGroup.fadeMode = LODFadeMode.CrossFade;
                lodGroup.animateCrossFading = true;

                //Create lods
                Dictionary<string, List<string>> lodGroupData = impConf.LodGroups[parent.name];
                List<string> lodKeysUnordered = lodGroupData.Keys.ToArray().ToList();
                LOD[] lods = new LOD[lodGroupData.Keys.Count];
                for (int i = 0; i < lods.Length; i++)
                {
                    string lodKey = nextKey(ref lodKeysUnordered);
                    Renderer[] renderers = new Renderer[lodGroupData[lodKey].Count];
                    for (int rendererIndex = 0; rendererIndex < renderers.Length; rendererIndex++)
                    {
                        renderers[rendererIndex] = parent.transform.Find(lodGroupData[lodKey][rendererIndex]).GetComponent<MeshRenderer>();
                    }
                    lods[i] = new LOD(1.0F / (2 + float.Parse(lodKey)), renderers);
                }
                lodGroup.SetLODs(lods);
            }
        }
        void SetStatic(GameObject parent)
        {
            if (setAsStatic)
            {
                parent.isStatic = true;
                foreach (Transform child in parent.transform.GetComponentsInChildren<Transform>())
                {
                    child.gameObject.isStatic = true;
                }
            }
        }

        /// <summary>
        /// returns the lowest "key" in the array and then deletes it
        /// </summary>
        /// <param name="keysRemaining"></param>
        /// <returns></returns>
        string nextKey(ref List<string> keysRemaining)
        {
            string lowest = keysRemaining[0];
            foreach (string key in keysRemaining)
            {
                if (int.Parse(key) < int.Parse(lowest))
                {
                    lowest = key;
                }
            }
            keysRemaining.Remove(lowest);
            return lowest;
        }
        void CreatePrefabInstances()
        {
            if (importType == 1)
            {
                SetImportConfigs();
                foreach (ImportConfig impconf in importConfigs)
                {
                    //create parent
                    GameObject parent = new GameObject(impconf.MeshName);
                    parent.transform.position = Vector3.zero;
                    foreach (string staticPrefab in impconf.Instances.Keys.ToArray())
                    {
                        //Debug.Log($"Creating instances of {staticPrefab}");


                        GameObject toInstantiate = AssetDatabase.LoadAssetAtPath<GameObject>($"{pathToUCLocal}/{f_Prefabs}/MapMulti_{impconf.MeshName}/{staticPrefab}.prefab");
                        if (toInstantiate != null)
                        {
                            foreach (InstanceInfo instanceInfo in impconf.Instances[staticPrefab])
                            {
                                Transform Instantiated = ((GameObject)PrefabUtility.InstantiatePrefab(toInstantiate, parent.transform)).transform;
                                Vector3 position = instanceInfo.vec3Translation();
                                position.x = position.x * -1;
                                position.y = position.y * -1;
                                position.z = position.z * -1;
                                Instantiated.position = position;
                                Vector3 rotation = instanceInfo.quatRotation().eulerAngles;
                                rotation.x += 180;
                                rotation.z *= -1;
                                Instantiated.rotation = Quaternion.Euler(rotation);
                                Instantiated.localScale = Vector3.one * 100 * instanceInfo.floatScale();

                                for (int i = 0; i < Instantiated.transform.childCount; i++)
                                {
                                    Instantiated.transform.GetChild(i).localRotation = Quaternion.Euler(new Vector3(0, 0, 0));
                                }
                                //Lod stuff if doing lod stuff
                                if (createLodGroups)
                                {
                                    if(olderUnity)
                                    {
                                        LODGroup activeLG = Instantiated.GetComponent<LODGroup>();
                                        LOD[] lods = activeLG.GetLODs();
                                        for(int i = 0; i < lods.Length; i++)
                                        {
                                            lods[i].screenRelativeTransitionHeight = 1.0F / (objectSizeMultiplier + i);
                                        }
                                        activeLG.SetLODs(lods);
                                    } else
                                    {
                                        Instantiated.GetComponent<LODGroup>().size *= objectSizeMultiplier;
                                    }
                                }
                            }

                        }


                    }
                    parent.transform.rotation = Quaternion.Euler(new Vector3(90, 0, 0));


                }
            }
        }
    }

    public class ImportConfig
    {
        public Dictionary<string, Dictionary<string, Dictionary<string, TexInfo>>> Materials { get; set; }
        public Dictionary<string, InstanceInfo[]> Instances { get; set; }
        public string MeshName { get; set; }
        public string UnrealInteropPath { get; set; }
        public Dictionary<string, string> Parts { get; set; }

        public Dictionary<string, Dictionary<string, List<string>>> LodGroups { get; set; }
    }
    public class TexInfo
    {
        public string Hash { get; set; }
        public string SRGB { get; set; }
    }

    public class InstanceInfo
    {
        public float[] Translation { get; set; }
        public float[] Rotation { get; set; }
        public float Scale { get; set; }
        public Vector3 vec3Translation()
        {
            return new Vector3(Translation[0], Translation[1], Translation[2]);
        }
        public Quaternion quatRotation()
        {
            return new Quaternion(Rotation[0], Rotation[1], Rotation[2], Rotation[3]);
        }
        public float floatScale()
        {
            return Scale;
        }
    }


}

